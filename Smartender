import json
import threading
import time
from datetime import datetime

class Smartender:
    """Main class to handle the Smartender operations."""
    
    def __init__(self, filename1):
        """
        Initialize Smartender with a JSON file containing cocktail data.
        """
        self.filename1 = filename1
        self.available_cocktails = []
        self.selected_cocktails = []
        self.selected_ingredients = []
        self.active_pumps = []
        self.countdown_thread = None
        self.countdown_event = threading.Event()

        self.load_cocktails()

    def load_cocktails(self):
        """Load cocktails from a JSON file."""
        try:
            with open(self.filename1, 'r') as file:
                data = json.load(file)
                for name, details in data.items():
                    self.available_cocktails.append(Cocktail(name, **details))
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"An error occurred while loading cocktails: {e}")

    def display_pump_status(self):
        """Display status of all active pumps."""
        for pump in self.active_pumps:
            pump.display_status()

    def show_cocktails(self, cocktails):
        """Display list of available cocktails."""
        print("\nAvailable Cocktails:\n")
        for cocktail in cocktails:
            cocktail.show()

    def get_user_input(self, prompt, quit_option='q'):
        """Get user input and handle quitting."""
        user_input = input(prompt).strip()
        if user_input.lower() == quit_option:
            return None
        return user_input

    def configure(self):
        """Handles Smartender configuration."""
        print("Welcome to your SmarTender!\n")
        while len(self.selected_ingredients) < 20:
            user_input = self.get_user_input("What cocktails do you want to make? Choose one or more from the available options: q to quit\t")
            if user_input is None:
                break
            self.add_cocktail(user_input)

        self.setup_pumps()

    def add_cocktail(self, user_input):
        """Add a selected cocktail to the Smartender menu."""
        for cocktail in self.available_cocktails:
            if user_input.lower() == cocktail.name.lower():
                self.selected_cocktails.append(cocktail)
                for ingredient in cocktail.ingredients:
                    if ingredient not in self.selected_ingredients:
                        self.selected_ingredients.append(ingredient)
                print(f"{cocktail.name} added to your Smartender\n")

    def setup_pumps(self):
        """Set up pumps for selected ingredients and cocktails."""
        id = 0
        for cocktail in self.selected_cocktails:
            for ingredient, details in cocktail.ingredients.items():
                if not self.pump_exists(ingredient):
                    self.active_pumps.append(Pump(id, ingredient, details['temperature'], None, [cocktail.name], TemperatureSensor(), FloatSwitch(), datetime.now()))
                    id += 1
                else:
                    self.update_pump_cocktails(ingredient, cocktail.name)
        print("Pumps successfully configured!\n")

    def pump_exists(self, ingredient):
        """Check if a pump for the ingredient already exists."""
        return any(pump.ingredient == ingredient for pump in self.active_pumps)

    def update_pump_cocktails(self, ingredient, cocktail_name):
        """Update the list of cocktails for an existing pump."""
        for pump in self.active_pumps:
            if pump.ingredient == ingredient:
                pump.cocktails.append(cocktail_name)

    def countdown_timer(self):
        """Start a countdown timer to simulate ingredients cooling waiting time."""
        self.countdown_event.clear()
        for i in range(10 * 60, -10, -60):
            if self.countdown_event.is_set():
                return
            mins, secs = divmod(i, 60)
            timeformat = '{:02d}:{:02d}'.format(mins, secs)
            print(timeformat, end='\r')
            time.sleep(1)

    def wait_for_ingredients(self, pumps, optimal_temps):
        """Wait until all ingredients are at their optimal temperature."""
        while True:
            all_optimal = all(
                pump.temperature_sensor.read_temperature(pump.last_refill_time) <= optimal_temp
                for pump, optimal_temp in zip(pumps, optimal_temps)
            )

            if all_optimal:
                print("All ingredients have reached their optimal temperatures.")
                return

            print("Some ingredients are still above their optimal temperatures. Please wait a few minutes or choose another cocktail.")
            if not self.countdown_thread or not self.countdown_thread.is_alive():
                self.countdown_thread = threading.Thread(target=self.countdown_timer)
                self.countdown_thread.start()

            user_input = self.get_user_input("Press 'b' to choose another cocktail or wait for the countdown: ")
            if user_input.lower() == 'b':
                self.countdown_event.set()
                self.countdown_thread.join()
                return

    def make_cocktail(self):
        """Prepare the selected cocktail."""
        user_input = self.get_user_input("What cocktail do you want to drink? Choose one or more from the available options\t")
        if user_input is None:
            return

        for cocktail in self.selected_cocktails:
            if user_input.lower() == cocktail.name.lower():
                print(f"\nYou chose {cocktail.name}!\n")

                ingredients_to_cool = []
                optimal_temps = []

                for ingredient, details in cocktail.ingredients.items():
                    ingredient_name = ingredient
                    ml = details['quantity']
                    optimal_temp = details['optimal_temp_C']

                    for pump in self.active_pumps:
                        if pump.ingredient == ingredient_name:
                            required_qty_percent = ((ml / 10) / pump.float_switch.quantity) * 100

                            if pump.float_switch.left_quantity < required_qty_percent:
                                print(f"Not enough {ingredient_name} left to make {cocktail.name}. Refilling the pump.")
                                pump.refill()

                            if pump.temperature_sensor.read_temperature(pump.last_refill_time) > optimal_temp:
                                ingredients_to_cool.append(pump)
                                optimal_temps.append(optimal_temp)

                if ingredients_to_cool:
                    self.wait_for_ingredients(ingredients_to_cool, optimal_temps)
                    return

                for ingredient, details in cocktail.ingredients.items():
                    ingredient_name = ingredient
                    ml = details['quantity']
                    optimal_temp = details['optimal_temp_C']
                    for pump in self.active_pumps:
                        if pump.ingredient == ingredient_name:
                            required_qty_percent = ((ml / 10) / pump.float_switch.quantity) * 100
                            pump.erogate(ingredient_name, ml, optimal_temp, required_qty_percent)

                print("Your cocktail is ready. Enjoy!")
                return
